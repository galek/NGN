Low-Level:
    Vor Gamejam:
    ✔ Asset Manager @done (02.10.16 03:08)
    ✔ Fix the stupid Material-"inheritance"-Bug. @done (02.10.16 20:53)
    It seems like when a Material is copied for a single pass the reference to the material it belongs to is not updated! The new pass of the new Material is still thinking the Material it belongs to is the old one.
    ✔ dirty-flags and recompiles for Materials and Passes, also Pass should hold ResourceHandles instead of pointers @done (02.10.16 20:53)
    ✔ Make Texture resources @done (02.10.16 21:35)
    ✔ Resource::add(name, pointer); @done (02.10.16 21:53)
    ✔ Read materials.md again @done (03.10.16 12:28)
    ✔ Read random_notes.txt and sort @done (03.10.16 03:10)
    ✔ Make include a pragma, remove uniform/attribute information from the shader and remove YAML files from it @done (03.10.16 15:46)
    ✔ YAML loading for Materials @done (04.10.16 17:47)
    The possibility to specify default textures as colors (which will then be generated)
    ✔ Proper Light Attenuation @done (08.10.16 17:28)
    ✔ Uniform-Optimierung @done (08.10.16 22:50)

    ✔ FBO @done (09.10.16 15:35)
    ✔ Spotlights @done (10.10.16 06:47)
    ✔ Shadows @done (10.10.16 06:47)
    ✔ automatic camera for directional lights @done (11.10.16 02:07)
    ✔ normal-bias parameter for shadow mapping @done (11.10.16 03:48)
    › Audiodatei anhören
    ✔ percentage closer filtering with randomly rotated poisson discs @done (11.10.16 15:25)

    › Post-Process-System
    › HDR
    › Deferred Shading
    Here shadow map and light culling becomes the task of culling
    In Deferred the lighting model is just not a slot?
    Clustered Deferred?
    Deferred sollte default renderer sein, Forward relativ langsam, aber Forward für ausgewählte OBjekte mit komplizierten MAterialien oder Transparenz
    › Normal Mapping
    http://www.j3l7h.de/talks/2008-02-18_Care_and_Feeding_of_Normal_Vectors.pdf
    › PBR
    › Skybox
    › Replace pointers with references if nullptr is not an option! - For returns and parameters!
    › Draw call sorting
    Also depth sorting for transparent objects
    For opaque geometry I want to draw all ambient passes first, so I can have a semi depth-prepass for shading
    For transparent geometry it is only correct to draw all passes for a single object after another and not first all ambient, then all lighting passes
    http://realtimecollisiondetection.net/blog/?p=86
    http://www.gamedev.net/topic/661114-temporal-coherence-and-render-queue-sorting/
    http://www.gamedev.net/topic/636389-advanced-render-queue-api/
    › At least Frustum Culling
    › Input
    › SceneGraph.castRay / Bullet integration?
    › ASSIMP-Import for whole Scenes
    › Text
    › Skinning
    › Scripting?

    -------------------
    › Picking
    › Bloom
    › Particles


-------------------------------------------------------------------------------------------

    › PostEffects make it clear that the globalShaderPreamble should be part of the material, since shaders are used elsewhere as well where they don't care at all about lights or transformations

    › Handle GL state somewhere. Some stuff is just ridiculous

    › More Cascaded Shadow Mapping
    Blending between cascades
    updateInverval/updateOffset (in frames) für cascades, sodass man weiter entfernte cascades cachen kann oder die letzten beiden nur alternierend oder so
    Adjust PCF Kernel size between cascades

    › Adjust (directional) lights up vector to get better shadow map fit

    › prefixes in shaders for different spaces? w for world, m for model, v for view, n for ndc, even t for texture/[0,1]?

    › Decouple Sampler state from Texture and make it part of the material?

    › Light Distance Attenuation Textures
    › Spotlight Angle Attenuation Textures (1D or Cubemap or 2D texture?)

    › Point light shadows
    Not all platforms support depth cube maps -> dual paraboloid

    › Use GL reflection to get uniform/attribute information
    They can be detected with "qualifiers (uniform|in) type name [= defaultvalue];" Parsing this is actually not that easy, but possible, I think?
    To make it easier at first, maybe help by prepending a "#pragma ngn uniform" in the line before, so we know where to look (somewhere between the pragma and the next semicolon)
    !! Alternatively use the GL-API to retrieve uniform/attribute information and make it part of the ShaderProgram and ShaderProgram::link
    Shader YAML is then not needed anymore (thank good, less files) and it's way less bad that it's not possible to inline resources in YAML files
    (This is way better anyways, since we get to know which variables have been optimized out!)

    › Maybe optimize render queue building a little by putting it in a separate thread
    the main thread then listens on an atomic counter containing the number of elements in the queue (which is increased by the render queue builder thread) and renders when it exceeds the already rendered number of entries
    Alternativ kann man es pro pass machen. Man builded in mehreren Threads Renderqueues für einzelne passes (und sortiert sie vor)

    › Hot Reloading for Resources
    › Asynchronous Loading for Resources

    › Make Mesh a proper Resource - after implementing proper loading

    › Predefined constants for uniform locations that are repeatedly set in render()
    There is no other way to get rid of map::find, except if all shaders start sharing locations for uniforms
    Maybe try implementing an own map, that just does a linear search
    › Implement setX-functions for UniformBlocks that take a location instead of a name
    And give a UniformBlock the option to change the internal type of the uniform to a location/Uniform-pair if instructed (meaning: if the locations of a certain uniform are not going to differ between all shaders on which the uniforms are going to be applied, the indirection through the map are not necessary) (should there be a global uniform location library?)
    Probably don't just overload setX with uint as the first argument, but rather introduce a new abstraction "Uniform", that can be queried by string and can be set using setMatrix, setVector3, etc.
    Maybe even only query the uniform locations on recompile/init, since for Materials at least the uniformslists always belong to a single shader, so caching is easily doable. This should definitely be controllable. Also (!!!) Materials rarely change their parameters, so even the calls to glUniformX can be avoided most of the time! Maybe the Material has to do extra stuff?
    Maybe have a class that is for containing uniforms that are directly associated with a single shader and another class for uniforms that are applied per-object (transforms) or per-frame (lights etc.). This is way too complicated.
    › Helper-Functions toGamma, toLinear - look up how to do this correctly in EXT_framebuffer_srgb
    https://www.opengl.org/registry/specs/EXT/framebuffer_sRGB.txt
    C-Functions are provided in this spec
    interestingly all color constants you can set in the programmable pipeline (blend ref color, clear color) are linear
    just as the alpha component is linear
    so probably make this convention as well.

    › light culling
    › batch lights (render multiple per pass)
    › Input
    › Use temporal coherence for render queue
    Store a linearized scene graph permanently and sort index lists, the linearized scene graph will be updated incrementally and is always stored in traversal order. The index list remains partially sorted and you never have to sort the full thing. New elements will just be appended.
    › SceneGraph.castRay - slow, without acceleration structure (maybe kd-tree or octree later?)
    https://www.cs.utexas.edu/~ckm/teaching/cs354_f11/lectures/Lecture21.pdf
    › statistics
    stripped in release, STATISTICS("name", value)
    the values can have different handlers, ones that just save the last written value, ones that average, ones that average in a window, etc.
    maybe every value has the option to query all these metrics
    for binds, recompiles, etc. - I need text output!

    › Generate Vertex Format from Material
    VertexFormat.require(Material/vector<AttributeType>) oder sonst irgendwie ne factory für VertexFormats bauen. Damit Types von Attributen immer passen und so, muss man vermutlich VertexFormat(Material) oder fromMaterial oder so implementieren.
    Vielleicht auch einfach, damit man einfach default-formats bauen kann will man require(vector<AttributeType>) haben
    dann kann an einfach VertexFormat.require({AttributeType::POSITION, AttributeType::NORMAL}); machen und muss minimal viel denken. MAterials brauchen dann aber vielleicht noch einen krasseren mechanismus.

    › Vertex Format
    2_10_10_10 für Normals, 2›USHORT für TexCoord

    › VertexBuffer.fillFromOtherBuffer

    › Assimp-Import flags optimieren
    http://assimp.sourceforge.net/lib_html/postprocess_8h.html
    › Assimp eine Scene (Object*) importieren lassen, statt eine Mesh-Liste.
    http://assimp.sourceforge.net/lib_html/structai_node.html
    http://assimp.sourceforge.net/lib_html/structai_mesh.html
    https://github.com/assimp/assimp/blob/master/samples/SimpleOpenGL/Sample_SimpleOpenGL.c

    › getSurfaceArea für Meshes

    › Implement multiple windows properly / GLContext abstraction, properly track state accordingly
    At the moment every window creates it's own context and they cannot be shared between different windows
    Also the OGL state (ShaderProgram, Texture, RenderStateBlock) is handled in static variables, there should be a current-context global and that should contain the state. Also shader caches and uniform locations and stuff have to be context aware.
    https://forums.libsdl.org/viewtopic.php?t=9884&sid=0c6cf97b3791991ba61f169498385a70

    › Custom pass system
    At the moment a Material can be rendered in multiple predefined passes, maybe there should be a way to insert custom ones to make sure stuff gets rendered in a certain order and maybe ways so spacify if a framebuffer readback is necessary or how the objects should be sorted for that pass. Or if uniforms should be set, if it is lit, etc.
    › Pass-Indices
    See above. If that is not provided, maybe build a class somewhere that wraps an int and increments the value automatically. Maybe with fixed ranges for specific renderers.
    In a single translation unit the order of initialization is defined (as defined in source), in multiple source files it's undefined, but that is irrelevant as long as it's consistent.

    › update bounding boxes automatically (with dirty/version-counter in vertex/indexbuffers)


    › Uniform Buffer Objects (maybe not?)
    http://stackoverflow.com/questions/32267727/efficiently-update-uniform-buffer-objects-with-instancing-and-culling
    http://www.gamedev.net/topic/655969-speed-gluniform-vs-uniform-buffer-objects/
    https://www.opengl.org/discussion_boards/showthread.php/178326-Uniform-Buffer-Object-Performance
    https://devtalk.nvidia.com/default/topic/752037/ubo-performance/?offset=2
    The gain seems to be minimal. Optimize the regular glUniform-pipeline (less strings!)

High-Level:
    › Layered Materials wie in Unreal oder Substance
    › Alternative Szenen-Repräsentation für Game logic:
    http://gamedev.stackexchange.com/questions/8210/scene-graph-as-object-container
    › Materials aus ASSIMP laden soweit möglich: http://learnopengl.com/#!Model-Loading/Model
    › Performance Counters - Rebinds, Recompiles (Shaders and VAOs), Reuploads, Rendered Objects, Culled Objects, etc., Frametime, State Switchesf
    › Scripting

    Default Renderer:
        › Decals
            http://www.gamedev.net/topic/639424-deferred-decals-normal-problem/
            http://www.gamedev.net/topic/570838-blending-decals-with-deferred-setup/
            https://mtnphil.wordpress.com/2014/05/24/decals-deferred-rendering/
        › Lightmapping
            http://www.ludicon.com/castano/blog/2016/09/lightmap-compression-in-the-witness/
            http://www.flipcode.com/archives/Light_Mapping_Theory_and_Implementation.shtml
            http://redframe-game.com/blog/lightmap-workflow-part-1-uv-generation/
        › Fog
            https://people.eecs.berkeley.edu/~ravir/papers/singlescat/scattering.pdf
        › Derivative Mapping
            http://johnwhigham.blogspot.de/2015/03/derivative-mapping.html
            http://www.rorydriscoll.com/2012/01/11/derivative-maps/
            http://polycount.com/discussion/91605/derivative-normal-maps-what-are-they
            http://www.rorydriscoll.com/2012/01/15/derivative-maps-vs-normal-maps/
            http://mmikkelsen3d.blogspot.de/2011/07/derivative-maps.html
        › Normal Mapping
        › Environment Mapping
        › Ambient Occlusion
            http://www.nvidia.com/object/siggraph-2008-HBAO.html
        › Distortion
            http://wiki.polycount.com/wiki/DuDv_map
        › PBR
            https://www.reddit.com/r/gamedev/comments/35plnt/physically_based_light_intensity/
            http://www.marmoset.co/toolbag/learn/pbr-practice
            https://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/
            http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
            https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/
            http://www.marmoset.co/toolbag/learn/pbr-theory
            https://www.kdab.com/wp-content/uploads/stories/KDAB-whitepaper-PBR-2016-04-v3.pdf
            https://gist.github.com/galek/53557375251e1a942dfa
            http://www.gamedev.net/topic/672836-pbr-metalness-equation/
            https://www.reddit.com/r/gamedev/comments/2r191k/physically_based_rendering_for_developers_ibl/
            http://polycount.com/discussion/147370/pbr-questions
            http://gamedev.stackexchange.com/questions/114360/what-is-the-difference-between-pbr-and-ssr
            http://www.html5gamedevs.com/topic/22615-difference-between-pbr-material-and-standard-material-with-reflections/
            https://seblagarde.wordpress.com/
            http://www.marmoset.co/toolbag/learn/pbr-conversion
            http://www.marmoset.co/toolbag/learn/pbr-practice
            https://seblagarde.wordpress.com/2014/04/14/dontnod-physically-based-rendering-chart-for-unreal-engine-4/
            http://www.gamedev.net/topic/669443-pbr-g-buffer-parameters-metalness/
            Man kann 2 Bit für Metalness benutzen und irgendwo ein Array mit den 4 möglichen Metalness values hinterlegen.
            https://supertuxkart.net/Antarctica:_Physically_Based_Shading
            http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx
            http://www.gamedev.net/topic/669443-pbr-g-buffer-parameters-metalness/
            http://computergraphics.stackexchange.com/questions/1513/how-physically-based-is-the-diffuse-and-specular-distinction
            http://blog.selfshadow.com/publications/s2015-shading-course/#course_content
            http://blog.selfshadow.com/publications/s2015-shading-course/hoffman/s2015_pbs_physics_math_slides.pdf <- das soll sehr geil sein und physik und so
            http://blog.selfshadow.com/publications/s2015-shading-course/activision/s2015_pbs_approx_models_slides.pdf
            https://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/
            http://blog.selfshadow.com/publications/s2012-shading-course/#course_content
            http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_slides_v2.pdf
            http://blog.selfshadow.com/publications/s2012-shading-course/hoffman/s2012_pbs_physics_math_slides.pdf
            https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf
            https://unity3d.com/learn/tutorials/topics/graphics/unity-5-lighting-and-rendering
            Beim Link hierüber auch gute Informationen über Reflection Probes und Realtime-GI
            http://joywando.com/blog/2016/9/8/lighting-shading-and-texturing-part-one-pbr
            https://www.youtube.com/watch?v=LP7HgIMv4Qo - Allegorithmic Intro to PBR

            https://seblagarde.wordpress.com/2013/04/29/memo-on-fresnel-equations/

            http://www.filmicworlds.com/2014/03/17/fresnel-f0-is-not-direct-reflectance/ Super guter Shit über F0

            https://seblagarde.wordpress.com/2011/08/17/hello-world/

            https://www.reddit.com/r/opengl/comments/3pro68/implementing_pbr/

            http://www.marmoset.co/toolbag/learn/pbr-conversion

            https://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/
            http://renderwonk.com/publications/s2010-shading-course/hoffman/s2010_physically_based_shading_hoffman_b_notes.pdf

            REAL good shit
            https://www.allegorithmic.com/pbr-guide
            https://www.allegorithmic.com/system/files/software/download/build/PBR_Guide_Vol.1.pdf
            https://www.allegorithmic.com/system/files/software/download/build/PBR_volume_02_rev05.pdf

            http://graphics.ucsd.edu/~henrik/papers/practical_microcylinder_appearance_model_for_cloth_rendering.pdf - CLOTH

            http://blog.selfshadow.com/publications/s2013-shading-course/#course_content - Material system in The Order: 1886
            https://mynameismjp.wordpress.com/2013/07/28/siggraph-follow-up/ - gehört dazu

            https://www.youtube.com/watch?v=gcUo7XY_M2M - PBS Intro
            https://www.youtube.com/watch?v=fJz0GgarVTo - Unreal Engine 4, Siggraph 2013 PBS

            https://www.youtube.com/watch?v=j-A0mwsJRmk - Physics of PBR, super geil
            => Course Notes!!!!

            ------------------

            https://www.youtube.com/watch?v=OeEYEUCa4tI
            https://www.youtube.com/watch?v=9DmRNlIJIp0
            https://www.youtube.com/watch?v=UIt-nemQopE
            https://www.youtube.com/watch?v=bj9P504JUAE
            https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
            http://blog.selfshadow.com/publications/s2013-shading-course/
            http://www.codinglabs.net/article_gamma_vs_linear.aspx
            http://www.codinglabs.net/article_physically_based_rendering.aspx
            http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx
            http://www.marmoset.co/toolbag/learn/pbr-theory
            steps of pbr:#
            gamma correctness
            HDR - tonemapping, then maybe bloom
            actual pbr
            environment probes
            screen space reflections
            color grading

            ---------

            http://ruh.li/GraphicsOrenNayar.html <- geil, junge
            http://ruh.li/GraphicsWard.html <- auch geil
            http://ruh.li/GraphicsCookTorrance.html
            http://simonstechblog.blogspot.de/2011/12/microfacet-brdf.html
        › Subsurface Scattering
            http://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_slides.pdf
        › Skybox
            http://threejs.org/examples/webgl_shaders_sky.html
        › Picking
            https://www.reddit.com/r/GraphicsProgramming/comments/50vlf8/techniques_for_accurate_picking/
        › Deferred Shading
            http://frictionalgames.blogspot.de/2010/12/bye-bye-pre-pass-lighting.html
            http://www.john-chapman.net/content.php?id=13
            http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter09.html
            http://learnopengl.com/#!Advanced-Lighting/Deferred-Shading
            https://urho3d.github.io/documentation/HEAD/_rendering_modes.html
            http://www.slideshare.net/TiagoAlexSousa/rendering-technologies-from-crysis-3-gdc-2013
            http://tomgillen.blogspot.de/2010/07/gbuffer-layout.html
            https://urho3d.github.io/documentation/HEAD/_rendering_modes.html
            siehe: intBitsToFloat und floatBitsToInt!
            http://stefan-s.net/?p=66 - gBuffer Layout in Unity 5
            https://software.intel.com/sites/default/files/m/d/4/1/d/8/lauritzen_deferred_shading_siggraph_2010.pdf - Tiled und Quad-culled deferred
            http://learnopengl.com/#!Advanced-Lighting/Deferred-Shading

            GBufferLayouts & normal encodings:#
            http://answers.unity3d.com/questions/1219627/modify-gbuffer-layout-add-rendertarget.html
            www.gamedev.net/topic/512155-render-target-formats-for-hdr-deferred-shading/
            www.gamedev.net/topic/645046-cryengine-gbuffer-normal-storing-technique/
            http://www.crytek.com/download/2014_03_25_CRYENGINE_GDC_Schultz.pdf
            http://nosferalatu.com/CQ2Rendering.html - auch ein bisschen pbr, eher so pbr + deferred
            http://www.gamedev.net/topic/671210-srgb-on-diffuse-textures-or-gbuffer-color-texture/
            http://aras-p.info/texts/CompactNormalStorage.html#method01xy
            http://www.garagegames.com/community/blogs/view/15340
            http://hacksoflife.blogspot.de/2010/12/yet-another-this-is-our-gbuffer-format.html
            http://hacksoflife.blogspot.de/2011/02/g-buffer-normals-revisited.html
            http://c0de517e.blogspot.de/2015/01/notes-on-g-buffer-normal-encodings.html
            http://www.gamedev.net/topic/637005-compact-world-space-normal-storage-in-g-buffer/
            http://sebh-blog.blogspot.de/2010/08/cryteks-best-fit-normals.html
            http://www.gamedev.net/topic/645046-cryengine-gbuffer-normal-storing-technique/
            http://khayyam.kaplinski.com/2011/07/encoding-normals-for-gbuffer.html

            http://ogldev.atspace.co.uk/www/tutorial35/tutorial35.html
            http://learnopengl.com/#!Advanced-Lighting/Deferred-Shading

            https://mynameismjp.wordpress.com/2009/03/10/reconstructing-position-from-depth/
            https://www.opengl.org/discussion_boards/showthread.php/179823-Help-reconstructing-pixel-position-from-depth
            http://www.derschmale.com/2014/01/26/reconstructing-positions-from-the-depth-buffer/
            http://gamedev.stackexchange.com/questions/71652/opengl-reconstructing-position-from-depth
        › Bloom
            Unreal Bloom - http://threejs.org/examples/webgl_postprocessing_unreal_bloom.html
        › Shadow Mapping - Cascade? Variance?
            http://graphicsrunner.blogspot.de/2008/07/dual-paraboloid-reflections.html
            http://http.developer.nvidia.com/GPUGems/gpugems_ch14.html
            http://gamedev.stackexchange.com/questions/81734/how-to-calculate-directional-light-frustum-from-camera-frustum
            http://gamedev.stackexchange.com/questions/73851/how-do-i-fit-the-camera-frustum-inside-directional-light-space
            http://docs.cryengine.com/display/SDKDOC4/Shadows+in+CryENGINE
            http://www.terathon.com/lengyel/Lengyel-Oblique.pdf
            https://www.youtube.com/watch?v=9gjIghvKW44
            http://www.realtimeshadows.com/sites/default/files/Playing%20with%20Real-Time%20Shadows_0.pdf
            https://mynameismjp.wordpress.com/2015/02/18/shadow-sample-update/
            http://learnopengl.com/#!Advanced-Lighting/Shadows/Shadow-Mapping
            http://www.gamedev.net/topic/533575-cascaded-or-parallel-split-shadow-maps-bounding-box-slice-selection/
            Culling: http://digitalrune.github.io/DigitalRune-Documentation/html/4058fb6c-8794-46cb-9d22-fb8558857179.htm
            https://msdn.microsoft.com/de-de/library/windows/desktop/ee416324(v=vs.85).aspx - Common Techniques to Improve Shadow Depth Maps
            http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/
            http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html - Parallel Split Shadow Maps
            http://faculty.ycp.edu/~dbabcock/PastCourses/cs470/labs/lab16.html - PCSS
            http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf - PCSS
            http://www.gamedev.net/topic/503600-pcss---unusable/
            http://www.burgerengine.com/blog/?p=27 - Exponential Shadow Maps
            http://ogldev.atspace.co.uk/www/tutorial49/tutorial49.html - CSM
            http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html - CSM
            http://developer.download.nvidia.com/SDK/10.5/opengl/src/cascaded_shadow_maps/doc/cascaded_shadow_maps.pdf
            https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/DynamicSceneShadows/ - Unreal CSM parameters
            http://docs.cryengine.com/display/SDKDOC4/Shadows+in+CryENGINE
            http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter17.html - Efficient Soft Shadows
            http://www.sunandblackcat.com/tipFullView.php?l=eng&topicid=35 - Improvements for Shadow Mapping
            http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf - Soft Shadows
            http://www.trentreed.net/blog/exponential-shadow-maps/
            https://mynameismjp.wordpress.com/2016/01/24/update-for-my-shadow-sample-update/
            https://mynameismjp.wordpress.com/2013/09/10/shadow-maps/
            http://www.olhovsky.com/2011/07/exponential-shadow-mapping-drawbacks/
            http://the-witness.net/news/2010/03/graphics-tech-shadow-maps-part-1/
            http://the-witness.net/news/2010/04/graphics-tech-shadow-maps-part-2-save-25-texture-memory-and-possibly-much-more/
            http://de.slideshare.net/TiagoAlexSousa/secrets-of-cryengine-3-graphics-technology
            http://gregory-igehy.hatenadiary.com/entry/2015/12/08/000330
            http://www.olhovsky.com/2011/07/shadow-map-filtering-experimentation/
            http://www.crytek.com/download/Playing%20with%20Real-Time%20Shadows.pdf

            Frustum fitting:#
            http://gamedev.stackexchange.com/questions/73851/how-do-i-fit-the-camera-frustum-inside-directional-light-space
            http://gamedev.stackexchange.com/questions/81734/how-to-calculate-directional-light-frustum-from-camera-frustum

            Acne/Biasing:#
            http://gamedev.stackexchange.com/questions/66970/slope-scaled-depth-bias-with-normal-maps
            http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/
            http://c0de517e.blogspot.de/2011/05/shadowmap-bias-notes.html
            http://de.slideshare.net/TiagoAlexSousa/secrets-of-cryengine-3-graphics-technology - In Bonus Slides
            https://mynameismjp.wordpress.com/2013/09/10/shadow-maps/
            http://www.dissidentlogic.com/old/#Notes%20on%20the%20Normal%20Offset%20Materials
            http://www.dissidentlogic.com/old/images/NormalOffsetShadows/GDC_Poster_NormalOffset.png - just works (tm)

            PCF:#
            http://www.sunandblackcat.com/tipFullView.php?l=eng&topicid=35
            http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/
            http://www.gamedev.net/topic/498755-randomly-rotated-pcf-shadows/

            Cascades:#
            http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/ - Biasing!
            http://developer.download.nvidia.com/SDK/10.5/opengl/src/cascaded_shadow_maps/doc/cascaded_shadow_maps.pdf
            https://msdn.microsoft.com/en-us/library/windows/desktop/ee416307 - Bibel
            https://www.opengl.org/discussion_boards/showthread.php/184007-Cascaded-shadow-mapping-and-split-values
            http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html
            http://ogldev.atspace.co.uk/www/tutorial49/tutorial49.html
        › HDR
            http://filmicgames.com/archives/75 - Different tone mapping operators
            https://mynameismjp.wordpress.com/2010/04/30/a-closer-look-at-tone-mapping/
            http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf
            http://frictionalgames.blogspot.de/2012/09/tech-feature-hdr-lightning.html
            https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/AutomaticExposure/index.html
            https://mynameismjp.wordpress.com/2011/08/10/average-luminance-compute-shader/
        › Parallax Mapping?
        › Gamma Correction
            http://renderwonk.com/blog/index.php/archive/adventures-with-gamma-correct-rendering/
            http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html
            http://stackoverflow.com/questions/23026151/do-i-need-to-gamma-correct-the-final-color-output-on-a-modern-computer-monitor
            http://learnopengl.com/#!Advanced-Lighting/Gamma-Correction
            https://www.reddit.com/r/programming/comments/53wdf6/what_every_coder_should_know_about_gamma/
            http://filmicgames.com/archives/299
            http://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/
        › Text Rendering
            https://www.reddit.com/r/opengl/comments/50umy2/text_rendering_in_opengl_33/
        › Draw call sorting / Render queue
        http://www.gamedev.net/topic/666163-render-queue-design/
        http://www.gamedev.net/topic/674377-render-queues-why-are-they-needed/
        › Particles
            https://www.youtube.com/watch?annotation_id=annotation_2102208391&feature=iv&src_vid=7fMCTVhEzmU&v=0IrCggoJCno
            Definitiv sheets benutzen können, daraus auswählen können und animieren
            Subemitters
            https://www.youtube.com/watch?annotation_id=annotation_912057639&feature=iv&src_vid=0IrCggoJCno&v=rR_bm8f8rVE
            http://realtimecollisiondetection.net/blog/?p=91
        › Z Prepass
            https://www.opengl.org/discussion_boards/showthread.php/183862-Depth-pre-pass-does-OpenGL-still-execute-fragment-shader-if-color-mask-is-GL_FALSE
        › Culling
            http://www.gamedev.net/topic/626778-whats-out-there-fast-frustum-culling/
            http://docs.cryengine.com/display/SDKDOC4/Culling+Explained
            Automatic Object Splitting
            Frustum Culling
            Portals
            z pre pass
            or https://fgiesen.wordpress.com/2013/02/17/optimizing-sw-occlusion-culling-index/
            CullingTheBattlefield.pdf
            http://sedici.unlp.edu.ar/bitstream/handle/10915/23640/4763-Implementing_Software_Occlusion_Culling_for_Real_Time_Applications.pdf;jsessionid=C824A64DB459A72888D2C81BEAA72A64?sequence=1
            http://de.slideshare.net/guerrillagames/practical-occlusion-culling-in-killzone-3
            Das beste scheint hier aber immer zu sein entweder die Geometry von Artists machen zu lassen, dafür hab ich nicht die Kapazität
            http://www.gdcvault.com/play/1017837/Why-Render-Hidden-Objects-Cull

            Coverage Buffer: http://de.slideshare.net/TiagoAlexSousa/secrets-of-cryengine-3-graphics-technology
            Frustum Culling:
                http://www.cse.chalmers.se/~uffe/vfc_bbox.pdf
                https://fgiesen.wordpress.com/2010/10/17/view-frustum-culling/
                https://fgiesen.wordpress.com/2010/10/20/some-more-frustum-culling-notes/
                http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
                http://zeuxcg.org/2009/01/31/view-frustum-culling-optimization-introduction/
                http://www.flipcode.com/archives/Frustum_Culling.shtml
                http://www.gamedev.net/page/resources/_/technical/general-programming/useless-snippet-2-aabbfrustum-test-r3342
                http://www.txutxi.com/?p=584
        › Lighting
            http://www.3dgep.com/texturing-and-lighting-with-opengl-and-glsl/
            http://ruh.li/GraphicsPhongBlinnPhong.html
            http://threejs.org/examples/webgl_lights_hemisphere.html

            http://www.codinglabs.net/article_physically_based_rendering_cook_torrance.aspx
            http://sunandblackcat.com/tipFullView.php?l=eng&topicid=31&topic=Advanced-GLSL-Lighting-Models

            › Area Lights
            http://www.gamedev.net/topic/640573-area-lights-forward-and-deferred/ Mehr Area lights
            http://www.gamedev.net/topic/677849-area-lights-with-deferred-renderer/
            http://www.gamedev.net/topic/552315-glsl-area-light-implementation/
            https://www.reddit.com/r/gamedev/comments/4iusfg/realtime_shading_with_area_light_sources_with/
            http://www.gamedev.net/topic/552315-glsl-area-light-implementation/
            http://research.microsoft.com/en-us/um/people/johnsny/papers/arealights.pdf

            › Attenuation
            http://gamedev.stackexchange.com/questions/51291/deferred-rendering-and-point-light-radius
            http://www.gamedev.net/topic/474015-light-attenuation-for-deferred-shading/
            https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/ - GOOD SHIT
            http://gamedev.stackexchange.com/questions/56897/glsl-light-attenuation-color-and-intensity-formula
        › Anti-Aliasing
            Temporal AA: http://threejs.org/examples/webgl_postprocessing_taa.html
            FXAA: https://www.youtube.com/watch?v=Z9bYzpwVINA
            www.gamedev.net/topic/618791-fxaa-in-opengl/
            https://bartwronski.com/2014/03/15/temporal-supersampling-and-antialiasing/
            http://www.crytek.com/download/Sousa_Graphics_Gems_CryENGINE3.pdf
        › Scripting
            https://urho3d.github.io/documentation/HEAD/_lua_scripting.html
            http://zeuxcg.org/2010/11/07/lua-callstack-with-c-debugger/
        › GodRays - http://threejs.org/examples/webgl_postprocessing_godrays.html
        › Screen Space Reflections
        https://www.reddit.com/r/gamedev/comments/52lawa/what_exactly_are_screenspace_reflections/
        http://roar11.com/2015/07/screen-space-glossy-reflections/
        › Some sort of Realtime GI?
        Light Propagation Volumes
        Voxel Cone Tracing

Sound:
    https://www.youtube.com/watch?v=Vjm--AqG04Y