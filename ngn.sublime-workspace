{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ret",
				"retMat"
			],
			[
				"Ver",
				"VertexShader"
			],
			[
				"Fra",
				"FragmentShader"
			],
			[
				"Res",
				"ResourceHandle"
			],
			[
				"ful",
				"fullCommand"
			],
			[
				"full",
				"fullTargetPath"
			],
			[
				"mouse",
				"mouseRadius"
			],
			[
				"angle",
				"angleOffset"
			],
			[
				"pill",
				"pillRegion"
			],
			[
				"window",
				"windowH"
			],
			[
				"win",
				"windowW"
			],
			[
				"decks",
				"decksSB"
			],
			[
				"play",
				"playsetPrice"
			],
			[
				"firstGerman",
				"firstGermanPlayset_prod"
			],
			[
				"first",
				"firstGermanPlayset_prod"
			],
			[
				"ply",
				"playsetPrice"
			],
			[
				"is",
				"isPlayset"
			],
			[
				"firstGer",
				"firstGermanSingle_prod"
			],
			[
				"firstGerma",
				"firstGermanPlayset"
			],
			[
				"pla",
				"playsetPrice"
			],
			[
				"single",
				"singlePrice"
			],
			[
				"firstG",
				"firstGermanPlayset"
			],
			[
				"langu",
				"languageName"
			],
			[
				"ACC",
				"MKM_ACCESS_TOKEN"
			],
			[
				"ACCE",
				"MKM_ACCESS_TOKEN_SECRET"
			],
			[
				"end",
				"endTime"
			],
			[
				"get",
				"getPlayerController_Gamepad"
			],
			[
				"pathIn",
				"pathInterp"
			],
			[
				"pathInterp",
				"pathInterpSpeed"
			],
			[
				"ene",
				"enemies"
			],
			[
				"VIEW_",
				"VIEW_ANGLE"
			],
			[
				"pathNode",
				"pathNodeStartTime"
			],
			[
				"path",
				"pathNodeTime"
			],
			[
				"next",
				"nextNode"
			],
			[
				"anim",
				"animationSet"
			],
			[
				"shove",
				"shoveAmount"
			],
			[
				"map",
				"mapObject"
			],
			[
				"fall",
				"fallDirection"
			],
			[
				"animation",
				"animationSet"
			],
			[
				"binar",
				"binaryInput_fromGamepad"
			],
			[
				"animatio",
				"animationSet"
			],
			[
				"rit",
				"ritualNames"
			],
			[
				"player",
				"playerSizeY"
			],
			[
				"playerS",
				"playerSizeY"
			],
			[
				"interac",
				"interactable"
			],
			[
				"angul",
				"angularVel"
			],
			[
				"angular",
				"angularDamping"
			],
			[
				"angu",
				"angularVel"
			],
			[
				"tile",
				"tileIndex"
			],
			[
				"tileset",
				"tilesets"
			],
			[
				"image",
				"imagewidth"
			],
			[
				"_tile",
				"_tileCountX"
			],
			[
				"target",
				"targetPosition"
			],
			[
				"float",
				"floatInput_fromGamepad"
			],
			[
				"packet",
				"packetIDs"
			],
			[
				"net",
				"netEventBuffer"
			],
			[
				"remo",
				"remoteEntity"
			],
			[
				"remote",
				"remotePeers"
			],
			[
				"netwo",
				"networking"
			],
			[
				"remoteEn",
				"remoteEntity"
			],
			[
				"proto",
				"protocol"
			],
			[
				"neto",
				"networkingSystem"
			],
			[
				"event",
				"eventHandler"
			],
			[
				"key",
				"keyboard"
			],
			[
				"conne",
				"connectToScene"
			],
			[
				"game",
				"gameScene"
			],
			[
				"test",
				"testScene"
			],
			[
				"render",
				"renderingSystem"
			],
			[
				"emit",
				"emitNow"
			],
			[
				"entit",
				"entityIDMap"
			],
			[
				"networ",
				"networkingSystem"
			],
			[
				"down",
				"down"
			],
			[
				"bind",
				"bindObject"
			],
			[
				"tick",
				"tickInterval"
			],
			[
				"rend",
				"renderingSystem"
			],
			[
				"lastI",
				"lastInTickIndex"
			],
			[
				"last",
				"lastInTickIndex"
			],
			[
				"update",
				"updateInterval"
			],
			[
				"handle",
				"handleEvents"
			],
			[
				"enti",
				"entities"
			],
			[
				"obser",
				"observedEvents"
			],
			[
				"system",
				"systemObserveEvent"
			],
			[
				"platform",
				"platformWidth"
			],
			[
				"plat",
				"platformWidth"
			],
			[
				"count",
				"countNeighbours"
			],
			[
				"inter",
				"intervalsOverlap"
			],
			[
				"poss",
				"possibleExits"
			],
			[
				"ke",
				"keypressed"
			],
			[
				"ran",
				"randomWeightSum"
			],
			[
				"rect",
				"rectIntersecting"
			],
			[
				"min",
				"minimumCorridorSize"
			],
			[
				"rand",
				"randomWeight"
			],
			[
				"modul",
				"modules"
			],
			[
				"random",
				"randomWeightSum"
			],
			[
				"press",
				"pressKeyFade"
			],
			[
				"pres",
				"pressKeyFade"
			],
			[
				"curren",
				"currentState"
			],
			[
				"abili",
				"abilityIcons"
			],
			[
				"text",
				"textWidget"
			],
			[
				"icon",
				"iconOffset"
			],
			[
				"stem",
				"stemIndex"
			],
			[
				"halo",
				"haloImage"
			],
			[
				"thorn",
				"thornImages"
			],
			[
				"start",
				"startIndex"
			],
			[
				"color",
				"colorOutline"
			],
			[
				"eat",
				"eatDuration"
			],
			[
				"ea",
				"eatingTimeRemaining"
			],
			[
				"knob",
				"knobList"
			],
			[
				"branch",
				"branchIndex"
			],
			[
				"to",
				"toPoint"
			],
			[
				"bran",
				"branchIndex"
			],
			[
				"texture",
				"textureCoords"
			],
			[
				"flo",
				"flowerHeadScale"
			],
			[
				"headI",
				"headImageIndex"
			],
			[
				"danc",
				"danceAmplitude"
			],
			[
				"ey",
				"eyeOffset"
			],
			[
				"targetM",
				"targetMouthScale"
			],
			[
				"targetMouth",
				"targetMouthScale"
			],
			[
				"targetMou",
				"targetMouthScale"
			],
			[
				"head",
				"headImageIndex"
			],
			[
				"crea",
				"creationTime"
			],
			[
				"targe",
				"targetKey"
			],
			[
				"eye",
				"eyeSpacing"
			],
			[
				"nextD",
				"nextDanceAngle"
			],
			[
				"dan",
				"danceOffset"
			],
			[
				"dance",
				"danceOffset"
			],
			[
				"interp",
				"interpStalk"
			],
			[
				"velFr",
				"velFromY"
			]
		]
	},
	"buffers":
	[
		{
			"file": "notes/ngn.todo",
			"settings":
			{
				"buffer_size": 21731,
				"line_ending": "Windows"
			}
		},
		{
			"file": "notes/materials.md",
			"settings":
			{
				"buffer_size": 8811,
				"line_ending": "Windows"
			}
		},
		{
			"file": "notes/random_notes.txt",
			"settings":
			{
				"buffer_size": 17507,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 6722,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include <yaml-cpp/yaml.h>\n\n#include \"material.hpp\"\n#include \"renderer.hpp\"\n\nnamespace ngn {\n    bool Material::staticInitialized = false;\n    Material* Material::fallback = nullptr;\n\n    void Material::staticInitialize() {\n        Material::staticInitialized = true;\n\n        delete new Shader; // force static initialization of Shader to make sure fallbacks are initialized :/\n        Material::fallback = new Material;\n        // Our unset ResourceHandles will automatically fall back to the shader fallbacks\n        Material::fallback->addPass(Renderer::AMBIENT_PASS);\n    }\n\n    ShaderProgram* Material::getShaderPermutation(uint64_t permutationHash, const FragmentShader* frag, const VertexShader* vert,\n            const std::string& fragDefines, const std::string& vertDefines) {\n        using keyType = std::tuple<uint64_t, const FragmentShader*, const VertexShader*>;\n        static std::unordered_map<keyType, ShaderProgram*, hash_tuple::hash<keyType> > shaderCache;\n\n        auto keyTuple = std::make_tuple(permutationHash, frag, vert);\n        auto it = shaderCache.find(keyTuple);\n        if(it == shaderCache.end()) {\n            ShaderProgram* prog = new ShaderProgram;\n            if(!prog->compileAndLinkFromStrings(frag->getFullString(fragDefines).c_str(),\n                                                vert->getFullString(vertDefines).c_str())) {\n                delete prog;\n                return nullptr;\n            }\n            shaderCache.insert(std::make_pair(keyTuple, prog));\n            return prog;\n        } else {\n            return it->second;\n        }\n    }\n\n    void Material::validate() const {\n        if((mBlendMode == BlendMode::MODULATE || mBlendMode == BlendMode::SCREEN) && (hasPass(Renderer::LIGHT_PASS)))\n            LOG_WARNING(\"Blend mode MODULATE and SCREEN don't work properly with lit materials!\");\n    }\n\n    void Material::setBlendMode(BlendMode mode) {\n        mBlendMode = mode;\n        switch(mode) {\n            case BlendMode::REPLACE:\n                mStateBlock.setBlendEnabled(false);\n                mStateBlock.setDepthWrite(true);\n                break;\n            case BlendMode::TRANSLUCENT:\n                mStateBlock.setBlendEnabled(true);\n                mStateBlock.setBlendEquation(RenderStateBlock::BlendEq::ADD);\n                mStateBlock.setBlendFactors(RenderStateBlock::BlendFactor::SRC_ALPHA, RenderStateBlock::BlendFactor::ONE_MINUS_SRC_ALPHA);\n                mStateBlock.setDepthWrite(false);\n                break;\n            case BlendMode::ADD:\n                mStateBlock.setBlendEnabled(true);\n                mStateBlock.setBlendEquation(RenderStateBlock::BlendEq::ADD);\n                mStateBlock.setBlendFactors(RenderStateBlock::BlendFactor::ONE, RenderStateBlock::BlendFactor::ONE);\n                mStateBlock.setDepthWrite(false);\n                break;\n            case BlendMode::MODULATE:\n                mStateBlock.setBlendEnabled(true);\n                mStateBlock.setBlendEquation(RenderStateBlock::BlendEq::ADD);\n                mStateBlock.setBlendFactors(RenderStateBlock::BlendFactor::DST_COLOR, RenderStateBlock::BlendFactor::ZERO);\n                mStateBlock.setDepthWrite(false);\n                break;\n            case BlendMode::SCREEN:\n                mStateBlock.setBlendEnabled(true);\n                mStateBlock.setBlendEquation(RenderStateBlock::BlendEq::ADD);\n                mStateBlock.setBlendFactors(RenderStateBlock::BlendFactor::ONE, RenderStateBlock::BlendFactor::ONE_MINUS_SRC_COLOR);\n                mStateBlock.setDepthWrite(false);\n                break;\n        }\n        validate();\n    }\n\n    bool strIsOneOf(const std::string& str, const std::vector<std::string>& options) {\n        return std::find(options.begin())\n    }\n\n    void nodeIsOneOf(const YAML::Node& node, const std::vector<std::string>& options) {\n        options.\n    }\n\n    Material* Material::load(const char* filename) {\n        Material* ret;\n        try {\n            YAML::Node root = YAML::LoadFile(filename);\n            if(root.Type() == YAML::NodeType::Map && root.size() == 1 && root[\"material\"]) {\n                const YAML::Node& material = root[\"material\"];\n\n                Material* base = nullptr;\n                if(material[\"base\"]) {\n                    if(material[\"base\"].Type() != YAML::NodeType::Scalar) {\n                        LOG_ERROR(\"'base' should be a scalar (a file path)\");\n                        return nullptr;\n                    }\n                    base = Resource::getPrepare<Material>(material[\"base\"].as<std::string>().c_str());\n                }\n\n                FragmentShader* frag = nullptr;\n                VertexShader* vert = nullptr;\n                if(material[\"shaders\"]) {\n                    const YAML::Node& shaders = material[\"shaders\"];\n                    if(shaders.Type() == YAML::NodeType::Map) {\n                        for(auto& it = shaders.begin(); it != shaders.end(); ++it) {\n                            const std::string name = it->first.as<std::string>\n                            if(name == \"fragment\") {\n                                frag = Resource::getPrepare<FragmentShader>(it->second.as<std::string>().c_str());\n                                if(!frag) return nullptr;\n                            } else if(name == \"vertex\") {\n                                vert = Resource::getPrepare<VertexShader>(it->second.as<std::string>().c_str());\n                                if(!vert) return nullptr;\n                            } else {\n                                LOG_ERROR(\"Invalid shader field '%s'\", name.c_str());\n                                return nullptr;\n                            }\n                        }\n                    } else {\n                        LOG_ERROR(\"'shaders' has to be map!\");\n                        return nullptr;\n                    }\n                }\n\n                if(!base && (!frag || !vert)) {\n                    LOG_ERROR(\"'shaders' has to be specified (both 'fragment' and 'vertex') if no 'base' is given!\");\n                    return nullptr;\n                }\n\n                Material* retMat = nullptr;\n                if(base) {\n                    if(frag) {\n                        if(vert)\n                            retMat = new Material(*base, frag, vert);\n                        else\n                            retMat = new Material(*base, frag);\n                    } else {\n                        if(vert)\n                            retMat = new Material(*base, vert);\n                        else\n                            retMat = new Material(*base);\n                    }\n                } else {\n                    // because of the condition above this both frag and vert are set\n                    retMat = new Material(frag, vert);\n                }\n                assert(retMat);\n\n                std::vector<std::string> blendModes = {\"replace\", \"translucent\", \"add\", \"modulate\", \"screen\"};\n\n            } else {\n                LOG_ERROR(\"Material file should only contain one key: 'material'\");\n                return nullptr;\n            }\n        } except(YAML::Exception exc) {\n            LOG_ERROR(\"Error loadinn YAML file '%s'\", exc.msg.c_str());\n            return nullptr;\n        }\n        return nullptr;\n    }\n}",
			"file": "src/ngn/material.cpp",
			"file_size": 7406,
			"file_write_time": 131199921021700076,
			"settings":
			{
				"buffer_size": 7300,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/SublimeClang/SublimeClang.sublime-settings",
			"settings":
			{
				"buffer_size": 13516,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ngn/material.hpp",
			"settings":
			{
				"buffer_size": 9815,
				"line_ending": "Windows"
			}
		},
		{
			"file": "media/materials/default.yml",
			"settings":
			{
				"buffer_size": 788,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"command_palette":
	{
		"height": 226.0,
		"selected_items":
		[
			[
				"sublime",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"sublimeclang",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instll",
				"Package Control: Install Package"
			],
			[
				"setsynta c+",
				"Set Syntax: C++11"
			],
			[
				"comm",
				"TortoiseSVN: Commit"
			],
			[
				"markdon che",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"pr",
				"Markdown Preview: Preview in Browser"
			],
			[
				"preview ",
				"Markdown Preview: Preview in Browser"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"markdown chea",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"new",
				"ANF: New File"
			],
			[
				"door",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"",
				"ANF: New File"
			],
			[
				"rename",
				"ANF: Rename File"
			],
			[
				"new ",
				"ANF: New File"
			],
			[
				"rename ",
				"ANF: Rename File"
			],
			[
				"new doc",
				"Tasks: New document"
			],
			[
				"packge",
				"Package Control: List Packages"
			],
			[
				"taview",
				"Tasks: View as HTML"
			],
			[
				"taks view",
				"Tasks: View as HTML"
			],
			[
				"tasks view",
				"Tasks: View as HTML"
			],
			[
				"tasks",
				"Tasks: View as HTML"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"tasks new",
				"Tasks: New document"
			],
			[
				"note",
				"Notes: Inbox"
			],
			[
				"not",
				"Notes: Index"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git:",
				"Git: Gitk"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"git histo",
				"Git: Commit history"
			],
			[
				"Git: statu",
				"Git: Status"
			],
			[
				"package remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"remove package",
				"Package Control: Remove Package"
			],
			[
				"global ",
				"BracketHighlighter: Toggle Global Enable"
			],
			[
				"bracket global ",
				"BracketHighlighter: Toggle Global Enable"
			],
			[
				"bracket g",
				"BracketHighlighter: Toggle Global Enable"
			],
			[
				"markdown cheat",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"open",
				"Tasks: Open Link"
			],
			[
				"task",
				"Tasks: New document"
			],
			[
				"package control",
				"Package Control: Remove Package"
			],
			[
				"gfm",
				"Set Syntax: Markdown GFM"
			],
			[
				"markdown pre",
				"Markdown Preview: Preview in Browser"
			],
			[
				"syntax",
				"Set Syntax: Markdown"
			],
			[
				"new file",
				"ANF: New File"
			],
			[
				"syntax lua",
				"Set Syntax: Lua"
			],
			[
				"packet insta",
				"Package Control: Install Package"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"markd brow",
				"Markdown Preview: Preview in Browser"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"love",
				"Build: Love2D"
			],
			[
				"matt",
				"BracketHighlighter: Match Brackets (ignore threshold)"
			],
			[
				"match",
				"BracketHighlighter: Match Brackets (ignore threshold)"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ssm",
				"Set Syntax: Markdown"
			],
			[
				"markdon pre",
				"Markdown Preview: Preview in Browser"
			],
			[
				"lov",
				"Build: Love2D"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ssma",
				"Set Syntax: Markdown"
			]
		],
		"width": 408.0
	},
	"console":
	{
		"height": 289.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/SublimeClang.sublime-settings",
		"/C/Users/Joel/dev/c++/ngn/src/ngn/material.cpp",
		"/C/Users/Joel/dev/Arbeit_MMI/la092750_MMI_JoelSchumacher/work.todo",
		"/C/Users/Joel/dev/web/ThreeJSStarfox/index.htm",
		"/C/Users/Joel/txt/magic_spendings.txt",
		"/C/Users/Joel/txt/MTG/current_needs.txt",
		"/D/oldBackupJoel",
		"/C/Users/Joel/txt/Backlog % Kinda-ToDo (ToGet & ToBuy)/serien&filme.todo",
		"/C/Users/Joel/dev/c++/WallSurfGame/CMakeLists.txt",
		"/P/the st4sh/tools/gif2webm.py",
		"/C/Users/Joel/Downloads/code_sample_pack/gl-21/camera-camlib-orbit-fly-modes/demo_fly_gl2.xml",
		"/C/Users/Joel/Downloads/code_sample_pack/gl-21/camera-camlib-orbit-fly-modes/gx_cam_lib_v1.lua",
		"/C/Users/Joel/Downloads/code_sample_pack/common/lua/Lib3D.lua",
		"/C/Users/Joel/Downloads/code_sample_pack/common/lua/DemoLib.lua",
		"/C/Users/Joel/txt/magic_results.txt",
		"/C/Users/Joel/txt/computer_abkacker.txt",
		"/C/Users/Joel/txt/ow_skins.txt",
		"/C/Users/Joel/dev/Arbeit_MMI/la092750_MMI_JoelSchumacher/stundenzettel.md",
		"/C/Users/Joel/dev/love_10.0/NewWeaponIcons/main.lua",
		"/C/Users/Joel/dev/love/RandomPatterns/main.lua",
		"/C/Users/Joel/txt/Backlog % Kinda-ToDo (ToGet & ToBuy)/shit to buy.todo",
		"/C/Users/Joel/txt/master.todo",
		"/C/Users/Joel/dev/love_10.0/IntakeClone/conf.lua",
		"/C/Users/Joel/dev/love_10.0/IntakeClone/main.lua",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Joel/dev/python/4cDL/dl.py",
		"/C/Users/Joel/dev/python/MKMDealNotification/watches.py",
		"/C/Users/Joel/dev/python/MKMDealNotification/userconfig.py",
		"/C/Users/Joel/dev/python/MKMDealNotification/mkm.py",
		"/C/Users/Joel/dev/python/MKMDealNotification/findProductID.py",
		"/C/Users/Joel/txt/hup_log.txt",
		"/C/Users/Joel/studienabschlusshilfe_ende.txt",
		"/C/Users/Joel/txt/MTG/Keranos, God of Storms.txt",
		"/C/Users/Joel/dev/project ideas/SortImgs.md",
		"/C/Users/Joel/txt/magic_verkauft.txt",
		"/C/Users/Joel/txt/fragen_jolyn_paris.txt",
		"/C/Users/Joel/dev/python/CardHist_mtgtop8/main.py",
		"/C/Users/Joel/dev/python/MKMDealNotification/main.py",
		"/C/Users/Joel/txt/MTG/modern_staples.txt",
		"/C/Users/Joel/dev/python/LocalGatherer/gatherer.py",
		"/C/Users/Joel/txt/MTG/Deckideen % -Notizen/Modern/semi_budget_d&t.txt",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Joel/txt/MTG/Deckideen % -Notizen/Modern/UWR/sideboard.txt",
		"/C/Users/Joel/dev/python/BackupTool/README.md",
		"/C/Users/Joel/dev/python/BackupTool/default.config.json",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/README.md",
		"/C/Users/Joel/dev/project ideas/misc_ideas_for_games.md",
		"/C/Users/Joel/dev/love/rayCast/blogpost.md",
		"/C/Users/Joel/dev/python/MKMAPITest/keys.py",
		"/C/Users/Joel/dev/python/MKMAPITest/mkmsdk_test.py",
		"/C/Users/Joel/txt/Talks % Articles % Mitschriften/how to make choices that matter.md",
		"/C/Users/Joel/txt/Talks % Articles % Mitschriften/what are your best little known game design tips.md",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/main.lua",
		"/C/Users/Joel/dev/love_10.0/WallSurfTest/main.lua",
		"/C/Users/Joel/dev/project ideas/backup tool.md",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/PlainTasks.sublime-settings",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/PlainTasks (Windows).sublime-settings",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/AdvancedNewFile/README.md",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/Lua Love/LuaLove.sublime-settings",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/pathfinder.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/collision.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/maps.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/enemies.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/math_vec.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/rituals.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/camera.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/input.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/const.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/player.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes/winscreen.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes/gameScene.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes/menu.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes/levelchooser.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/utility.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/TEsound.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/media/maps/level_2.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/media/maps/level_1.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/objects.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/anims.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/conf.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/objectives.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes/init.lua",
		"/C/Users/Joel/dev/love/search.py",
		"/C/Users/Joel/dev/love/ngnTest/ngn/init.lua",
		"/C/Users/Joel/dev/love/ISR2015/main.lua",
		"/C/Users/Joel/dev/love/ngnTest/main.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/scenes.lua",
		"/C/Users/Joel/dev/love_10.0/GGJ2016/tweaks.lua",
		"/C/Users/Joel/dev/love/ngnTest/ngn/scenes.lua",
		"/C/Users/Joel/txt/global_game_jam.todo",
		"/C/Users/Joel/txt/Backlog % Kinda-ToDo (ToGet & ToBuy)/bücher.todo",
		"/C/Users/Joel/txt/Backlog % Kinda-ToDo (ToGet & ToBuy)/spiele.todo",
		"/C/Users/Joel/txt/Backlog % Kinda-ToDo (ToGet & ToBuy)/musik.todo",
		"/C/Users/Joel/txt/Talks % Articles % Mitschriften/game_design_theory_overview.md",
		"/C/Users/Joel/dev/love/ISR2015/conf.lua",
		"/C/Users/Joel/txt/Leihliste & Verschollenes.md",
		"/C/Users/Joel/txt/Talks % Articles % Mitschriften/ellen_brock_writing tips.md",
		"/C/Users/Joel/dev/love/ngnTest/scenes/game.lua",
		"/C/Users/Joel/dev/love/ngnTest/const.lua",
		"/C/Users/Joel/dev/python/Workflowy2PlainTasks/out.todo",
		"/C/Users/Joel/dev/love/SudoHack/todo.todo",
		"/C/Users/Joel/dev/python/Workflowy2PlainTasks/convert.py",
		"/C/Users/Joel/master.todo",
		"/C/Users/Joel/dev/love/ngnTest/game_design_theory_overview.md",
		"/C/Users/Joel/dev/python/readTrelloJSON/projektideen.txt",
		"/C/Users/Joel/global_game_jam.todo",
		"/C/Users/Joel/dev/SyncedMusic2014/SyncedMusic2014/SyncedMusic2014.sdf",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/Markdown.sublime-settings",
		"/C/Users/Joel/dev/love/ngnTest/scenes/connectto.lua",
		"/C/Users/Joel/dev/love/ngnTest/ngn/ecs.lua",
		"/C/Users/Joel/dev/love/ngnTest/scenes/choosemode.lua",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/messages/Tutorial.todo",
		"/C/Users/Joel/Downloads/gommek.png",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/Default (Windows).sublime-keymap",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/custom2.hidden-tmTheme",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/custom.hidden-tmTheme",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/GitGutter/Default (Windows).sublime-keymap",
		"/C/Users/Joel/dev/love/ngnTest/systems/networking.lua",
		"/C/Users/Joel/dev/love/SudoHack/controller.lua",
		"/C/Users/Joel/dev/love/ngnTest/ngn/input.lua",
		"/C/Users/Joel/AppData/Roaming/LOVE/NGN/console.lua",
		"/C/Users/Joel/dev/love/ngnTest/systems/rendering.lua",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/User/GitGutter.sublime-settings",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/GitGutter/GitGutter.sublime-settings",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/PlainTasks.py",
		"/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/PlainTasks/messages/install.txt"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"-*.sublime-workspace,-*.sublime-project",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"null",
			"entry.name",
			"\\",
			"d",
			"]",
			"t",
			"slayer",
			"defense",
			"console",
			"str",
			"decksMB",
			"helix",
			"firstGermanSingle",
			"firstGermanPlayset",
			"firstGermanSingle",
			", ",
			"card[\"type\"]",
			"total",
			"els",
			"]",
			"ctrl+r",
			"</code>",
			"<code>",
			"Recall",
			"MKM",
			"scenes.winScreen.simTime",
			"enemy.path",
			"target",
			"menu",
			"winScreen",
			"image",
			".image",
			"TG",
			"hasWon",
			".see",
			"worldToTiles",
			"worldToScreen",
			"hit",
			"hit1",
			"1.0 + 0.3 * shoveAmount",
			"collision",
			"patrol",
			"player",
			"image",
			"player",
			"cellSize",
			"scene.",
			"],",
			"\"level_1\"",
			"print",
			"0",
			"door",
			"0",
			"\"}\n",
			"slide",
			"bounce",
			"object",
			"- ",
			"config",
			"object",
			"Object",
			"object",
			"{position = {0,0}, velocity = {0,0}, angle = 0, angularVel = 0, damping = 0, angularDamping = 0, offset = {0,0}, image = nil, radius = 10},",
			", an",
			"{}",
			"map.tileSize",
			"1",
			"[2][2]",
			"[2][1]",
			"[1][2]",
			"[1][1]",
			"then",
			"map._tilesize",
			"clamp",
			"vret",
			"ret",
			"mapTable",
			"200",
			"200, 255), love.math.random(200, 255), love.math.random(200, 255), 255)\n							end",
			"255",
			"newImage",
			"{\n",
			"magic",
			"print",
			"camera.y",
			"window",
			"control",
			"ngn",
			"Questions",
			"ressources",
			"\"",
			"local",
			"scenes",
			"cfg",
			"emitEvents",
			"emitInput",
			"packetIDs",
			"System",
			"system",
			"System",
			"system",
			"System",
			"system",
			"System",
			"system",
			"System",
			"system",
			"eventHandler",
			"system",
			"alt+s",
			".lastDown",
			".down",
			"Down",
			"down",
			"Down",
			"down",
			"renderingSystem",
			"testScene",
			"connectToScene",
			"love.keyboard.isDown(",
			"enterScene",
			"enterSC",
			"chooseModeScene = {}\n\nfunction chooseModeScene.init()\n	\nend\n\nfunction chooseModeScene.onEnter()\n\nend\n\nfunction chooseModeScene.onExit()\n\nend\n\nfunction chooseModeScene.update()\n	if love.keyboard.isDown(\"h\") then \n		enterScene(gameScene, \"host\")\n	end \n\n	if love.keyboard.isDown(\"c\") then \n		enterScene(connectToScene)\n	end\n\n	ngn.aux.clearAndSwap(function()\n		love.graphics.print(\"Press H to host (port 1337) a game or C to connect\", 5, 5)\n	end)\nend",
			"chooseModeScene",
			"chooseMode",
			"testScene",
			"self.time",
			"print"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"[/lua]",
			"[lua]",
			"/",
			"mode",
			"gui.backend",
			"widgets.passEvent",
			"internal"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "notes/ngn.todo",
					"settings":
					{
						"buffer_size": 21731,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PlainTasks/PlainTasks.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "notes/materials.md",
					"settings":
					{
						"buffer_size": 8811,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/MarkdownEditing/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "notes/random_notes.txt",
					"settings":
					{
						"buffer_size": 17507,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/MarkdownEditing/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/main.cpp",
					"settings":
					{
						"buffer_size": 6722,
						"regions":
						{
						},
						"selection":
						[
							[
								103,
								103
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/ngn/material.cpp",
					"settings":
					{
						"buffer_size": 7300,
						"regions":
						{
						},
						"selection":
						[
							[
								3754,
								3754
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1300.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Joel/AppData/Roaming/Sublime Text 2/Packages/SublimeClang/SublimeClang.sublime-settings",
					"settings":
					{
						"buffer_size": 13516,
						"regions":
						{
						},
						"selection":
						[
							[
								5562,
								5562
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3000.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ngn/material.hpp",
					"settings":
					{
						"buffer_size": 9815,
						"regions":
						{
						},
						"selection":
						[
							[
								7645,
								7645
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "media/materials/default.yml",
					"settings":
					{
						"buffer_size": 788,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.clang":
	{
		"height": 128.0
	},
	"output.exec":
	{
		"height": 113.0
	},
	"output.git":
	{
		"height": 128.0
	},
	"output.jotter":
	{
		"height": 128.0
	},
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				".yml",
				"media/materials/default.yml"
			],
			[
				"material.c",
				"src/ngn/material.cpp"
			],
			[
				"material",
				"src/ngn/material.cpp"
			],
			[
				"main.cpp",
				"src/main.cpp"
			],
			[
				"random",
				"notes/random_notes.txt"
			],
			[
				"mater",
				"notes/materials.md"
			],
			[
				"todo",
				"notes/ngn.todo"
			],
			[
				"rea",
				"README.md"
			],
			[
				"win",
				"scenes/winscreen.lua"
			],
			[
				"game",
				"scenes/gameScene.lua"
			],
			[
				"le",
				"scenes/levelchooser.lua"
			],
			[
				"te",
				"TEsound.lua"
			],
			[
				"me",
				"scenes/menu.lua"
			],
			[
				"menu",
				"scenes/menu.lua"
			],
			[
				"level",
				"scenes/levelchooser.lua"
			],
			[
				"lev",
				"scenes/levelchooser.lua"
			],
			[
				"enem",
				"enemies.lua"
			],
			[
				"const",
				"const.lua"
			],
			[
				"main",
				"main.lua"
			],
			[
				"uti",
				"utility.lua"
			],
			[
				"level_2",
				"media/maps/level_2.lua"
			],
			[
				"player",
				"player.lua"
			],
			[
				"maps",
				"maps.lua"
			],
			[
				"ritu",
				"rituals.lua"
			],
			[
				"ene",
				"enemies.lua"
			],
			[
				"play",
				"player.lua"
			],
			[
				"ri",
				"rituals.lua"
			],
			[
				"pla",
				"player.lua"
			],
			[
				"inpu",
				"input.lua"
			],
			[
				"path",
				"pathfinder.lua"
			],
			[
				"ga",
				"scenes/gameScene.lua"
			],
			[
				"ma",
				"maps.lua"
			],
			[
				"gm",
				"scenes/gameScene.lua"
			],
			[
				"coll",
				"collision.lua"
			],
			[
				"pl",
				"player.lua"
			],
			[
				"camer",
				"camera.lua"
			],
			[
				"enemi",
				"enemies.lua"
			],
			[
				"math",
				"math_vec.lua"
			],
			[
				"obje",
				"objects.lua"
			],
			[
				"p",
				"player.lua"
			],
			[
				"games",
				"scenes/gameScene.lua"
			],
			[
				"obj",
				"objects.lua"
			],
			[
				"cons",
				"const.lua"
			],
			[
				"mat",
				"math_vec.lua"
			],
			[
				"map",
				"maps.lua"
			],
			[
				"conf",
				"conf.lua"
			],
			[
				"co",
				"collision.lua"
			],
			[
				"con",
				"conf.lua"
			],
			[
				"ecs",
				"ngn/ecs.lua"
			],
			[
				"net",
				"systems/networking.lua"
			],
			[
				"scenes",
				"scenes/game.lua"
			],
			[
				"ren",
				"systems/rendering.lua"
			],
			[
				"ec",
				"ngn/ecs.lua"
			],
			[
				"chose",
				"scenes/choosemode.lua"
			],
			[
				"connect",
				"scenes/connectto.lua"
			],
			[
				"scene",
				"ngn/scenes.lua"
			],
			[
				"render",
				"components/rendering.lua"
			],
			[
				"rende",
				"systems/rendering.lua"
			],
			[
				"input",
				"ngn/input.lua"
			],
			[
				"trans",
				"components/transforms.lua"
			],
			[
				"init",
				"ngn/init.lua"
			],
			[
				"rend",
				"systems/rendering.lua"
			],
			[
				"test",
				"scenes/test.lua"
			],
			[
				"scne",
				"ngn/scenes.lua"
			],
			[
				"rendering",
				"ngn/systems/rendering.lua"
			],
			[
				"systems",
				"ngn/systems/init.lua"
			],
			[
				"ngn",
				"ngn/init.lua"
			],
			[
				"spiket",
				"modules/spikeTunnel.lua"
			],
			[
				"empty",
				"modules/emptyRoom.lua"
			],
			[
				"randomspi",
				"modules/randomBlocksSpikes.lua"
			],
			[
				"mapgen",
				"mapgen.lua"
			],
			[
				"randomblocks",
				"modules/randomBlocksSpikes.lua"
			],
			[
				"randombs",
				"modules/randomBlocks.lua"
			],
			[
				"empt",
				"modules/emptyRoom.lua"
			],
			[
				"randomblockss",
				"modules/randomBlocksSpikes.lua"
			],
			[
				"tex",
				"textWidgets.lua"
			],
			[
				"plant",
				"plant.lua"
			],
			[
				"move",
				"moveGraph.lua"
			],
			[
				"ants",
				"ants.lua"
			],
			[
				"camera",
				"camera.lua"
			],
			[
				"sta",
				"states/start.lua"
			],
			[
				"st",
				"states/start.lua"
			],
			[
				"text",
				"textWidgets.lua"
			],
			[
				"start",
				"states/start.lua"
			],
			[
				"knobs",
				"knobs.lua"
			],
			[
				"u",
				"utility.lua"
			],
			[
				"star",
				"states/start.lua"
			],
			[
				"face",
				"face.lua"
			],
			[
				"dire",
				"director.lua"
			],
			[
				"kno",
				"knobs.lua"
			],
			[
				"knob",
				"knobs.lua"
			],
			[
				"gam",
				"states/game.lua"
			],
			[
				"plan",
				"plant.lua"
			],
			[
				"l",
				"level.lua"
			],
			[
				"ant",
				"ants.lua"
			],
			[
				"mov",
				"moveGraph.lua"
			],
			[
				"fa",
				"face.lua"
			],
			[
				"light",
				"lighttest.map"
			],
			[
				"binds",
				"binds.lua"
			],
			[
				"misc",
				"misc.lua"
			],
			[
				"edit",
				"editor.lua"
			],
			[
				"enti",
				"entities.lua"
			],
			[
				"ei",
				"editor.lua"
			],
			[
				"to",
				"todo.txt"
			],
			[
				"mis",
				"misc.lua"
			],
			[
				"core",
				"components/core.lua"
			],
			[
				"ed",
				"editor.lua"
			],
			[
				"edi",
				"editor.lua"
			],
			[
				"speci",
				"specialModes.lua"
			],
			[
				"de",
				"kraidGUI/themes/default.lua"
			],
			[
				"bin",
				"binds.lua"
			],
			[
				"spe",
				"specialModes.lua"
			],
			[
				"bind",
				"binds.lua"
			],
			[
				"toto",
				"kraidGUI/widgets/radiobutton.lua"
			],
			[
				"caera",
				"camera.lua"
			],
			[
				"linein",
				"kraidGUI/widgets/lineinput.lua"
			],
			[
				"lay",
				"kraidGUI/layouts.lua"
			],
			[
				"gameo",
				"gameobject.lua"
			],
			[
				"gfx",
				"gfx.lua"
			],
			[
				"gamel",
				"gameloop.lua"
			],
			[
				"world",
				"world.lua"
			],
			[
				"un",
				"untitled"
			],
			[
				"in",
				"inputs.lua"
			],
			[
				"asse",
				"assetlist.txt"
			],
			[
				"worl",
				"world.lua"
			],
			[
				"gameob",
				"gameobject.lua"
			],
			[
				"buil",
				"building_gen.lua"
			],
			[
				"gf",
				"gfx.lua"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Joel/dev/love/kraidGUI/kraidguiproj.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true
}
